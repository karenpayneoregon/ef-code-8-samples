// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using EF_Core_MaskingSample1.Classes;
using System.ComponentModel.DataAnnotations.Schema;

namespace EF_Core_MaskingSample1.Models;

public partial class Person
{
    public int Id { get; set; }

    public string FirstName { get; set; }

    public string LastName { get; set; }

    public DateOnly BirthDate { get; set; }

    /// <summary>
    /// Gets or sets the credit card number for the current <see cref="Person"/> ie.
    /// </summary>
    /// <value>
    /// A string representing the credit card number. The value is encrypted when stored in the database 
    /// and should be decrypted using the <see cref="DecryptCreditCard"/> method when accessed.
    /// </value>
    /// <remarks>
    /// Ensure that the credit card data is encrypted using the <see cref="EncryptCreditCard"/> method 
    /// before storing it persistently and decrypted using the <see cref="DecryptCreditCard"/> method 
    /// when needed. Use the <see cref="MaskedCreditCard"/> property to retrieve a masked version of the 
    /// credit card number for display purposes.
    /// </remarks>
    public string CreditCard { get; set; }

    /// <summary>
    /// Gets the masked representation of the credit card number for the current <see cref="Person"/> instance.
    /// </summary>
    /// <value>
    /// A string containing the masked credit card number in the format "XXXX-XXXX-XXXX-####", 
    /// where "####" represents the last four digits of the original credit card number. 
    /// If the <see cref="CreditCard"/> property is null, empty, or contains fewer than four digits, 
    /// the value will be "XXXX-XXXX-XXXX-XXXX".
    /// </value>
    /// <remarks>
    /// This property is not mapped to the database and is derived from the <see cref="CreditCard"/> property.
    /// </remarks>
    [NotMapped]
    public string MaskedCreditCard
    {
        get
        {
            if (string.IsNullOrWhiteSpace(CreditCard))
                return "XXXX-XXXX-XXXX-XXXX";

            var digitsOnly = new string(CreditCard.Where(char.IsDigit).ToArray());

            if (digitsOnly.Length < 4)
                return "XXXX-XXXX-XXXX-XXXX";

            return $"XXXX-XXXX-XXXX-{digitsOnly[^4..]}";
        }
    }

    /// <summary>
    /// Encrypts the credit card information for the current <see cref="Person"/> instance.
    /// </summary>
    /// <param name="encryptionService">
    /// An instance of <see cref="EncryptionService"/> used to encrypt the credit card data.
    /// </param>
    /// <remarks>
    /// This method utilizes the provided <see cref="EncryptionService"/> to encrypt the 
    /// <see cref="CreditCard"/> property if it contains a non-empty value.
    /// </remarks>
    public void EncryptCreditCard(EncryptionService encryptionService)
    {
        if (!string.IsNullOrEmpty(CreditCard))
        {
            CreditCard = encryptionService.Encrypt(CreditCard);
        }
    }

    /// <summary>
    /// Decrypts the encrypted credit card information for the current <see cref="Person"/> instance.
    /// </summary>
    /// <param name="encryptionService">
    /// An instance of <see cref="EncryptionService"/> used to decrypt the credit card data.
    /// </param>
    /// <remarks>
    /// This method utilizes the provided <see cref="EncryptionService"/> to decrypt the 
    /// <see cref="CreditCard"/> property if it contains a non-empty value.
    /// </remarks>
    public void DecryptCreditCard(EncryptionService encryptionService)
    {
        if (!string.IsNullOrEmpty(CreditCard))
        {
            CreditCard = encryptionService.Decrypt(CreditCard);
        }
    }
}