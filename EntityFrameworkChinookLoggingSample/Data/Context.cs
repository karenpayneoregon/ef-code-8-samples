// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using ChinookLoggingSample.Models;
using Microsoft.EntityFrameworkCore;
using System.Diagnostics;
using EntityCoreFileLogger;
using EntityFrameworkChinookLoggingSample.Classes;

#nullable disable

// ReSharper disable once CheckNamespace
namespace ChinookLoggingSample.Data;

public partial class Context : DbContext
{
    public Context()
    {
    }

    public Context(DbContextOptions<Context> options) : base(options)
    {
    }

    public virtual DbSet<Album> Album { get; set; }

    public virtual DbSet<Artist> Artist { get; set; }

    public virtual DbSet<Customer> Customer { get; set; }

    public virtual DbSet<Employee> Employee { get; set; }

    public virtual DbSet<Genre> Genre { get; set; }

    public virtual DbSet<Invoice> Invoice { get; set; }

    public virtual DbSet<InvoiceLine> InvoiceLine { get; set; }

    public virtual DbSet<MediaType> MediaType { get; set; }

    public virtual DbSet<Playlist> Playlist { get; set; }

    public virtual DbSet<Table_1> Table_1 { get; set; }

    public virtual DbSet<Track> Track { get; set; }

    private static readonly SlowQueryInterceptor _slowQueryInterceptor
        = new SlowQueryInterceptor();

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        /*
         * for development enable sensitive logging while outside of Visual Studio do not
         * log sensitive data
         */
        if (Debugger.IsAttached)
        {
            optionsBuilder.UseSqlServer(ConnectionString())
                .AddInterceptors(_slowQueryInterceptor)
                .EnableSensitiveDataLogging()
                .LogTo(new DbContextToFileLogger().Log,
                    new[] { DbLoggerCategory.Database.Command.Name }, 
                    Microsoft.Extensions.Logging.LogLevel.Information);
        }
        else
        {
            optionsBuilder.UseSqlServer(ConnectionString())
                .AddInterceptors(new SlowQueryInterceptor())
                .LogTo(new DbContextToFileLogger().Log,
                    new[] { DbLoggerCategory.Database.Command.Name }, 
                    Microsoft.Extensions.Logging.LogLevel.Information);
        }

    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {

        modelBuilder.ApplyConfiguration(new Configurations.AlbumConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.ArtistConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.CustomerConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.EmployeeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.GenreConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InvoiceConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.InvoiceLineConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.MediaTypeConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.PlaylistConfiguration());
        modelBuilder.ApplyConfiguration(new Configurations.Table_1Configuration());
        modelBuilder.ApplyConfiguration(new Configurations.TrackConfiguration());

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
